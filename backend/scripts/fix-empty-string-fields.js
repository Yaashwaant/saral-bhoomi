import mongoose from 'mongoose';
import dotenv from 'dotenv';

// Load environment variables
dotenv.config();

// MongoDB connection
const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/saral-bhoomi');
    console.log('‚úÖ MongoDB connected successfully');
  } catch (error) {
    console.error('‚ùå MongoDB connection error:', error);
    process.exit(1);
  }
};

// Get the collection directly
const getCollection = () => {
  return mongoose.connection.db.collection('landownerrecords2');
};

// Function to fix empty string fields
const fixEmptyStringFields = async () => {
  console.log('üîß Fixing Empty String Fields in Records from Serial 79 Onwards');
  console.log('================================================================');
  
  const collection = getCollection();
  
  // Get all documents
  const allDocs = await collection.find({}).toArray();
  console.log(`üìä Total documents found: ${allDocs.length}\n`);
  
  // Define numeric fields that should not be empty strings
  const numericFields = [
    '‡§ó‡§æ‡§Ç‡§µ ‡§®‡§Æ‡•Å‡§®‡§æ 7/12 ‡§®‡•Å‡§∏‡§æ‡§∞ ‡§ú‡§Æ‡§ø‡§®‡•Ä‡§ö‡•á ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ (‡§π‡•á.‡§Ü‡§∞)',
    '‡§∏‡§Ç‡§™‡§æ‡§¶‡§ø‡§§ ‡§ú‡§Æ‡§ø‡§®‡•Ä‡§ö‡•á ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ (‡§ö‡•å.‡§Æ‡•Ä/‡§π‡•á‡§ï‡•ç‡§ü‡§∞ ‡§Ü‡§∞)',
    '‡§∏‡§Ç‡§™‡§æ‡§¶‡•Ä‡§§ ‡§π‡•ã‡§£‡§æ‡§±‡•ç‡§Ø‡§æ ‡§ú‡§Æ‡§ø‡§®‡•Ä‡§ö‡•ç‡§Ø‡§æ ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞‡§æ‡§®‡•Å‡§∏‡§æ‡§∞ ‡§Ø‡•á‡§£‡§æ‡§∞‡•á ‡§¨‡§æ‡§ú‡§æ‡§∞‡§Æ‡•Å‡§≤‡•ç‡§Ø ‡§∞.‡§∞‡•Ç',
    '‡§ï‡§≤‡§Æ 26 (2) ‡§®‡•Å‡§∏‡§æ‡§∞ ‡§ó‡§æ‡§µ‡§æ‡§∏ ‡§≤‡§æ‡§ó‡•Å ‡§Ö‡§∏‡§≤‡•á‡§≤‡•á ‡§ó‡§£‡§ï Factor (‡§Ö.‡§ï‡•ç‡§∞. 5 X 8)',
    '‡§ï‡§≤‡§Æ 26 ‡§®‡•Å‡§∏‡§æ‡§∞ ‡§ú‡§Æ‡§ø‡§®‡•Ä‡§ö‡§æ ‡§Æ‡•ã‡§¨‡§¶‡§≤‡§æ (9X10)',
    '‡§è‡§ï‡•Å‡§£ ‡§∞‡§ï‡•ç‡§ï‡§Æ ‡§∞‡•Å‡§™‡§Ø‡•á (16+18+ 20+22)',
    '‡§è‡§ï‡•Å‡§£ ‡§∞‡§ï‡•ç‡§ï‡§Æ (14+23)',
    '100 %  ‡§∏‡•ã‡§≤‡•á‡§∂‡§ø‡§Ø‡§Æ (‡§¶‡§ø‡§≤‡§æ‡§∏‡§æ ‡§∞‡§ï‡•ç‡§ï‡§Æ) ‡§∏‡•á‡§ï‡•ç‡§∂‡§® 30 (1)  RFCT-LARR 2013 ‡§Ö‡§®‡•Å‡§∏‡•Ç‡§ö‡§ø 1 ‡§Ö.‡§®     ‡§®‡§Ç. 5',
    '‡§®‡§ø‡§∞‡•ç‡§ß‡§æ‡§∞‡§ø‡§§ ‡§Æ‡•ã‡§¨‡§¶‡§≤‡§æ 26 = (24+25)',
    '‡§è‡§ï‡•Ç‡§£ ‡§∞‡§ï‡•ç‡§ï‡§Æ‡•á‡§µ‡§∞  25%  ‡§µ‡§æ‡§¢‡•Ä‡§µ ‡§Æ‡•ã‡§¨‡§¶‡§≤‡§æ\n(‡§Ö.‡§ï‡•ç‡§∞. 26 ‡§®‡•Å‡§∏‡§æ‡§∞ ‡§Ø‡•á‡§£‡§æ‡§±‡•ç‡§Ø‡§æ ‡§∞‡§ï‡•ç‡§ï‡§Æ‡•á‡§µ‡§∞)',
    '‡§è‡§ï‡•Å‡§£ ‡§Æ‡•ã‡§¨‡§¶‡§≤‡§æ (26+ 27)',
    '‡§π‡§ø‡§§‡§∏‡§Ç‡§¨‡§Ç‡§ß‡§ø‡§§‡§æ‡§≤‡§æ ‡§Ö‡§¶‡§æ ‡§ï‡§∞‡§æ‡§µ‡§Ø‡§æ‡§ö‡•Ä ‡§è‡§ï‡•Å‡§£ ‡§Æ‡•ã‡§¨‡§¶‡§≤‡§æ ‡§∞‡§ï‡•ç‡§ï‡§Æ ‡§∞‡•Å‡§™‡§Ø‡•á (‡§Ö.‡§ï‡•ç‡§∞. 28 ‡§µ‡§ú‡§æ 29)'
  ];
  
  let updatedCount = 0;
  const updates = [];
  
  // Check records from serial 79 onwards (index 78 onwards)
  const recordsToFix = allDocs.slice(78); // Serial 79 = index 78
  
  console.log(`üéØ Checking ${recordsToFix.length} records from serial 79 onwards\n`);
  
  for (let i = 0; i < recordsToFix.length; i++) {
    const doc = recordsToFix[i];
    const serialNumber = 79 + i;
    const updateFields = {};
    let hasUpdates = false;
    
    console.log(`üî∏ Checking Serial ${serialNumber} (Document ID: ${doc._id}):`);
    
    // Check each numeric field
    numericFields.forEach(fieldName => {
      const value = doc[fieldName];
      
      if (value === '' || (typeof value === 'string' && value.trim() === '')) {
        console.log(`   ‚ö†Ô∏è  Field "${fieldName}": Empty string -> Converting to 0`);
        updateFields[fieldName] = 0;
        hasUpdates = true;
      } else if (typeof value === 'string' && value !== '' && !isNaN(parseFloat(value))) {
        // Convert numeric strings to numbers
        const numericValue = parseFloat(value);
        console.log(`   üîÑ Field "${fieldName}": String "${value}" -> Number ${numericValue}`);
        updateFields[fieldName] = numericValue;
        hasUpdates = true;
      }
    });
    
    if (hasUpdates) {
      updates.push({
        documentId: doc._id,
        serialNumber,
        updateFields
      });
      console.log(`   ‚úÖ Will update ${Object.keys(updateFields).length} fields`);
    } else {
      console.log(`   ‚úÖ No updates needed`);
    }
    
    console.log('');
  }
  
  console.log(`üìã Summary: Found ${updates.length} records that need updates\n`);
  
  if (updates.length === 0) {
    console.log('‚úÖ No updates needed - all fields are already properly formatted');
    return;
  }
  
  // Apply the updates
  console.log('üîß Applying updates...\n');
  
  for (const update of updates) {
    try {
      const result = await collection.updateOne(
        { _id: update.documentId },
        { $set: update.updateFields }
      );
      
      if (result.modifiedCount > 0) {
        updatedCount++;
        console.log(`‚úÖ Updated Serial ${update.serialNumber} - ${Object.keys(update.updateFields).length} fields`);
      } else {
        console.log(`‚ö†Ô∏è  No changes made to Serial ${update.serialNumber}`);
      }
    } catch (error) {
      console.error(`‚ùå Error updating Serial ${update.serialNumber}:`, error);
    }
  }
  
  console.log(`\nüéâ Update Complete!`);
  console.log(`üìä Records updated: ${updatedCount}/${updates.length}`);
  
  // Verification
  console.log('\nüîç Verification - Checking updated records...');
  
  const verificationDocs = await collection.find({}).toArray();
  const verificationRecords = verificationDocs.slice(78);
  
  let emptyStringCount = 0;
  let numericStringCount = 0;
  
  verificationRecords.forEach((doc, index) => {
    const serialNumber = 79 + index;
    
    numericFields.forEach(fieldName => {
      const value = doc[fieldName];
      
      if (value === '' || (typeof value === 'string' && value.trim() === '')) {
        emptyStringCount++;
      } else if (typeof value === 'string' && value !== '' && !isNaN(parseFloat(value))) {
        numericStringCount++;
      }
    });
  });
  
  console.log(`üìä Verification Results:`);
  console.log(`   Empty strings remaining: ${emptyStringCount}`);
  console.log(`   Numeric strings remaining: ${numericStringCount}`);
  console.log(`   Status: ${emptyStringCount === 0 && numericStringCount === 0 ? '‚úÖ All fields properly converted' : '‚ö†Ô∏è Some issues remain'}`);
};

// Main execution
const main = async () => {
  try {
    await connectDB();
    await fixEmptyStringFields();
  } catch (error) {
    console.error('‚ùå Error during field fixing:', error);
  } finally {
    await mongoose.connection.close();
    console.log('\nüîå Database connection closed');
  }
};

main();