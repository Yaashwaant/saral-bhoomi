import mongoose from 'mongoose';
import dotenv from 'dotenv';

// Load environment variables
dotenv.config();

// MongoDB connection
const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/saral-bhoomi');
    console.log('тЬЕ MongoDB connected successfully');
  } catch (error) {
    console.error('тЭМ MongoDB connection error:', error);
    process.exit(1);
  }
};

// Get the collection directly
const getCollection = () => {
  return mongoose.connection.db.collection('landownerrecords2');
};

// Function to perform final numeric conversion
const finalNumericConversion = async () => {
  console.log('ЁЯФз Final Numeric Field Conversion');
  console.log('=================================');
  
  const collection = getCollection();
  
  // Get all documents
  const allDocs = await collection.find({}).toArray();
  console.log(`ЁЯУК Total documents found: ${allDocs.length}\n`);
  
  // Fields that should definitely be numeric (based on analysis)
  const numericFieldsToFix = [
    'рдЬрдорд┐рдиреАрдЪреЗ рджрд░ (рдкреНрд░рддрд┐ рд╣реЗрдХреНрдЯрд░) рд░рдХреНрдХрдо рд░реБрдкрдпреЗ',
    'рд╕рдВрдкрд╛рджреАрдд рд╣реЛрдгрд╛рд▒реНрдпрд╛ рдЬрдорд┐рдиреАрдЪреНрдпрд╛ рдХреНрд╖реЗрддреНрд░рд╛рдиреБрд╕рд╛рд░ рдпреЗрдгрд╛рд░реЗ рдмрд╛рдЬрд╛рд░рдореБрд▓реНрдп рд░.рд░реВ',
    'рдХрд▓рдо 26 (2) рдиреБрд╕рд╛рд░ рдЧрд╛рд╡рд╛рд╕ рд▓рд╛рдЧреБ рдЕрд╕рд▓реЗрд▓реЗ рдЧрдгрдХ Factor (рдЕ.рдХреНрд░. 5 X 8)',
    'рдПрдХреВрдг рд░рдХреНрдХрдореЗрд╡рд░  25%  рд╡рд╛рдвреАрд╡ рдореЛрдмрджрд▓рд╛\n(рдЕ.рдХреНрд░. 26 рдиреБрд╕рд╛рд░ рдпреЗрдгрд╛рд▒реНрдпрд╛ рд░рдХреНрдХрдореЗрд╡рд░)',
    'рд╣рд┐рддрд╕рдВрдмрдВрдзрд┐рддрд╛рд▓рд╛ рдЕрджрд╛ рдХрд░рд╛рд╡рдпрд╛рдЪреА рдПрдХреБрдг рдореЛрдмрджрд▓рд╛ рд░рдХреНрдХрдо рд░реБрдкрдпреЗ (рдЕ.рдХреНрд░. 28 рд╡рдЬрд╛ 29)',
    '100 %  рд╕реЛрд▓реЗрд╢рд┐рдпрдо (рджрд┐рд▓рд╛рд╕рд╛ рд░рдХреНрдХрдо) рд╕реЗрдХреНрд╢рди 30 (1)  RFCT-LARR 2013 рдЕрдиреБрд╕реВрдЪрд┐ 1 рдЕ.рди     рдирдВ. 5'
  ];
  
  let updatedCount = 0;
  const updates = [];
  
  // Check records from serial 79 onwards (index 78 onwards)
  const recordsToFix = allDocs.slice(78); // Serial 79 = index 78
  
  console.log(`ЁЯОп Checking ${recordsToFix.length} records from serial 79 onwards\n`);
  
  for (let i = 0; i < recordsToFix.length; i++) {
    const doc = recordsToFix[i];
    const serialNumber = 79 + i;
    const updateFields = {};
    let hasUpdates = false;
    
    console.log(`ЁЯФ╕ Checking Serial ${serialNumber} (Document ID: ${doc._id}):`);
    
    // Check each numeric field that needs fixing
    numericFieldsToFix.forEach(fieldName => {
      const value = doc[fieldName];
      
      if (value === '' || (typeof value === 'string' && value.trim() === '')) {
        console.log(`   тЪая╕П  Field "${fieldName}": Empty string -> Converting to 0`);
        updateFields[fieldName] = 0;
        hasUpdates = true;
      } else if (typeof value === 'string' && value !== '' && !isNaN(parseFloat(value))) {
        // Convert numeric strings to numbers
        const numericValue = parseFloat(value);
        console.log(`   ЁЯФД Field "${fieldName}": String "${value}" -> Number ${numericValue}`);
        updateFields[fieldName] = numericValue;
        hasUpdates = true;
      }
    });
    
    if (hasUpdates) {
      updates.push({
        documentId: doc._id,
        serialNumber,
        updateFields
      });
      console.log(`   тЬЕ Will update ${Object.keys(updateFields).length} fields`);
    } else {
      console.log(`   тЬЕ No updates needed`);
    }
    
    console.log('');
  }
  
  console.log(`ЁЯУЛ Summary: Found ${updates.length} records that need updates\n`);
  
  if (updates.length === 0) {
    console.log('тЬЕ No updates needed - all numeric fields are already properly formatted');
    return;
  }
  
  // Apply the updates
  console.log('ЁЯФз Applying updates...\n');
  
  for (const update of updates) {
    try {
      const result = await collection.updateOne(
        { _id: update.documentId },
        { $set: update.updateFields }
      );
      
      if (result.modifiedCount > 0) {
        updatedCount++;
        console.log(`тЬЕ Updated Serial ${update.serialNumber} - ${Object.keys(update.updateFields).length} fields`);
      } else {
        console.log(`тЪая╕П  No changes made to Serial ${update.serialNumber}`);
      }
    } catch (error) {
      console.error(`тЭМ Error updating Serial ${update.serialNumber}:`, error);
    }
  }
  
  console.log(`\nЁЯОЙ Update Complete!`);
  console.log(`ЁЯУК Records updated: ${updatedCount}/${updates.length}`);
  
  // Final comprehensive verification
  console.log('\nЁЯФН Final Comprehensive Verification...');
  
  const verificationDocs = await collection.find({}).toArray();
  
  // Check all records for string values in numeric fields
  let totalStringValues = 0;
  let totalEmptyStrings = 0;
  let totalProperNumerics = 0;
  
  // All possible numeric field names
  const allNumericFieldNames = [
    'рдЧрд╛рдВрд╡ рдирдореБрдирд╛ 7/12 рдиреБрд╕рд╛рд░ рдЬрдорд┐рдиреАрдЪреЗ рдХреНрд╖реЗрддреНрд░ (рд╣реЗ.рдЖрд░)',
    'рд╕рдВрдкрд╛рджрд┐рдд рдЬрдорд┐рдиреАрдЪреЗ рдХреНрд╖реЗрддреНрд░ (рдЪреМ.рдореА/рд╣реЗрдХреНрдЯрд░ рдЖрд░)',
    'рдЬрдорд┐рдиреАрдЪреЗ рджрд░ (рдкреНрд░рддрд┐ рд╣реЗрдХреНрдЯрд░) рд░рдХреНрдХрдо рд░реБрдкрдпреЗ',
    'рд╕рдВрдкрд╛рджреАрдд рд╣реЛрдгрд╛рд▒реНрдпрд╛ рдЬрдорд┐рдиреАрдЪреНрдпрд╛ рдХреНрд╖реЗрддреНрд░рд╛рдиреБрд╕рд╛рд░ рдпреЗрдгрд╛рд░реЗ рдмрд╛рдЬрд╛рд░рдореБрд▓реНрдп рд░.рд░реВ',
    'рдХрд▓рдо 26 (2) рдиреБрд╕рд╛рд░ рдЧрд╛рд╡рд╛рд╕ рд▓рд╛рдЧреБ рдЕрд╕рд▓реЗрд▓реЗ рдЧрдгрдХ Factor (рдЕ.рдХреНрд░. 5 X 8)',
    'рдХрд▓рдо 26 рдиреБрд╕рд╛рд░ рдЬрдорд┐рдиреАрдЪрд╛ рдореЛрдмрджрд▓рд╛ (9X10)',
    'рдмрд╛рдВрдзрдХрд╛рдореЗ',
    'рд╡рдирдЭрд╛рдбреЗ',
    'рдлрд│рдЭрд╛рдбреЗ',
    'рд╡рд┐рд╣рд┐рд░реА/рдмреЛрдЕрд░рд╡реЗрд▓',
    'рдПрдХреБрдг рд░рдХреНрдХрдо рд░реБрдкрдпреЗ (16+18+ 20+22)',
    'рдПрдХреБрдг рд░рдХреНрдХрдо (14+23)',
    '100 %  рд╕реЛрд▓реЗрд╢рд┐рдпрдо (рджрд┐рд▓рд╛рд╕рд╛ рд░рдХреНрдХрдо) рд╕реЗрдХреНрд╢рди 30 (1)  RFCT-LARR 2013 рдЕрдиреБрд╕реВрдЪрд┐ 1 рдЕ.рди     рдирдВ. 5',
    'рдирд┐рд░реНрдзрд╛рд░рд┐рдд рдореЛрдмрджрд▓рд╛ 26 = (24+25)',
    'рдПрдХреВрдг рд░рдХреНрдХрдореЗрд╡рд░  25%  рд╡рд╛рдвреАрд╡ рдореЛрдмрджрд▓рд╛\n(рдЕ.рдХреНрд░. 26 рдиреБрд╕рд╛рд░ рдпреЗрдгрд╛рд▒реНрдпрд╛ рд░рдХреНрдХрдореЗрд╡рд░)',
    'рдПрдХреБрдг рдореЛрдмрджрд▓рд╛ (26+ 27)',
    'рд╡рдЬрд╛рд╡рдЯ рд░рдХреНрдХрдо рд░реБрдкрдпреЗ',
    'рд╣рд┐рддрд╕рдВрдмрдВрдзрд┐рддрд╛рд▓рд╛ рдЕрджрд╛ рдХрд░рд╛рд╡рдпрд╛рдЪреА рдПрдХреБрдг рдореЛрдмрджрд▓рд╛ рд░рдХреНрдХрдо рд░реБрдкрдпреЗ (рдЕ.рдХреНрд░. 28 рд╡рдЬрд╛ 29)'
  ];
  
  verificationDocs.forEach((doc, index) => {
    const serialNumber = index + 1;
    
    allNumericFieldNames.forEach(fieldName => {
      const value = doc[fieldName];
      
      if (value === '' || (typeof value === 'string' && value.trim() === '')) {
        totalEmptyStrings++;
      } else if (typeof value === 'string' && value !== '' && !isNaN(parseFloat(value))) {
        totalStringValues++;
      } else if (typeof value === 'number') {
        totalProperNumerics++;
      }
    });
  });
  
  console.log(`ЁЯУК Final Database Status:`);
  console.log(`========================`);
  console.log(`   Total documents: ${verificationDocs.length}`);
  console.log(`   Empty strings in numeric fields: ${totalEmptyStrings}`);
  console.log(`   Numeric strings remaining: ${totalStringValues}`);
  console.log(`   Proper numeric values: ${totalProperNumerics}`);
  console.log(`   Conversion status: ${totalStringValues === 0 ? 'тЬЕ COMPLETE - All numeric strings converted' : 'тЪая╕П INCOMPLETE - Some numeric strings remain'}`);
  
  if (totalStringValues > 0) {
    console.log(`\nтЪая╕П  Note: ${totalStringValues} numeric strings still remain. These may need manual review.`);
  }
  
  if (totalEmptyStrings > 0) {
    console.log(`\nЁЯУЭ Note: ${totalEmptyStrings} empty strings remain. These are likely in text fields and can be left as-is.`);
  }
};

// Main execution
const main = async () => {
  try {
    await connectDB();
    await finalNumericConversion();
  } catch (error) {
    console.error('тЭМ Error during final conversion:', error);
  } finally {
    await mongoose.connection.close();
    console.log('\nЁЯФМ Database connection closed');
  }
};

main();