import mongoose from 'mongoose';
import dotenv from 'dotenv';

// Load environment variables
dotenv.config();

// MongoDB connection
const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/saral-bhoomi');
    console.log('тЬЕ MongoDB connected successfully');
  } catch (error) {
    console.error('тЭМ MongoDB connection error:', error);
    process.exit(1);
  }
};

// Get the collection directly
const getCollection = () => {
  return mongoose.connection.db.collection('landownerrecords2');
};

// Function to check data types of specific fields
const verifyDataTypes = async () => {
  console.log('ЁЯФН Data Type Verification Tool');
  console.log('===============================');
  
  const collection = getCollection();
  
  // Get a sample of documents
  const sampleDocs = await collection.find({}).limit(5).toArray();
  
  if (sampleDocs.length === 0) {
    console.log('тЭМ No documents found in the collection');
    return;
  }
  
  console.log(`ЁЯУК Analyzing ${sampleDocs.length} sample documents...\n`);
  
  // Fields to check
  const fieldsToCheck = [
    'рдЧрд╛рдВрд╡_рдирдореБрдирд╛_7_12_рдиреБрд╕рд╛рд░_рдЬрдорд┐рдиреАрдЪреЗ_рдХреНрд╖реЗрддреНрд░_рд╣реЗ_рдЖрд░',
    'рд╕рдВрдкрд╛рджрд┐рдд_рдЬрдорд┐рдиреАрдЪреЗ_рдХреНрд╖реЗрддреНрд░_рдЪреМ_рдореА_рд╣реЗрдХреНрдЯрд░_рдЖрд░',
    'рдордВрдЬреБрд░_рдХреЗрд▓реЗрд▓рд╛_рджрд░_рдкреНрд░рддрд┐_рд╣реЗрдХреНрдЯрд░_рд░рдХреНрдХрдо_рд░реБрдкрдпреЗ',
    'рд╕рдВрдкрд╛рджреАрдд_рд╣реЛрдгрд╛рд▒реНрдпрд╛_рдЬрдорд┐рдиреАрдЪреНрдпрд╛_рдХреНрд╖реЗрддреНрд░рд╛рдиреБрд╕рд╛рд░_рдпреЗрдгрд╛рд░реЗ_рдмрд╛рдЬрд╛рд░рдореБрд▓реНрдп_рд░_рд░реВ',
    'рдХрд▓рдо_26_2_рдиреБрд╕рд╛рд░_рдЧрд╛рд╡рд╛рд╕_рд▓рд╛рдЧреБ_рдЕрд╕рд▓реЗрд▓реЗ_рдЧрдгрдХ_Factor_рдЕ_рдХреНрд░_5_X_8',
    'рдХрд▓рдо_26_рдиреБрд╕рд╛рд░_рдЬрдорд┐рдиреАрдЪрд╛_рдореЛрдмрджрд▓рд╛_9X10',
    'рдПрдХреБрдг_рд░рдХреНрдХрдо_рд░реБрдкрдпреЗ_16_18_20_22',
    'рдПрдХреБрдг_рд░рдХреНрдХрдо_14_23',
    'рдирд┐рд░реНрдзрд╛рд░рд┐рдд_рдореЛрдмрджрд▓рд╛_26',
    'рдПрдХреБрдг_рдореЛрдмрджрд▓рд╛_26_27',
    'рд╡рдЬрд╛рд╡рдЯ_рд░рдХреНрдХрдо_рд░реБрдкрдпреЗ',
    'рд╣рд┐рддрд╕рдВрдмрдВрдзрд┐рддрд╛рд▓рд╛_рдЕрджрд╛_рдХрд░рд╛рд╡рдпрд╛рдЪреА_рдПрдХреБрдг_рдореЛрдмрджрд▓рд╛_рд░рдХреНрдХрдо_рд░реБрдкрдпреЗ'
  ];
  
  sampleDocs.forEach((doc, index) => {
    console.log(`ЁЯФ╕ Document ${index + 1} (ID: ${doc._id}):`);
    
    fieldsToCheck.forEach(field => {
      const value = doc[field];
      const type = typeof value;
      const isString = type === 'string';
      const isNumber = type === 'number';
      
      if (value !== undefined && value !== null && value !== '') {
        console.log(`   ${field}:`);
        console.log(`     Value: ${value}`);
        console.log(`     Type: ${type}`);
        console.log(`     Is String: ${isString}`);
        console.log(`     Is Number: ${isNumber}`);
        
        if (isString) {
          console.log(`     тЪая╕П  STRING DETECTED - needs conversion`);
        } else if (isNumber) {
          console.log(`     тЬЕ Already numeric`);
        }
        console.log('');
      }
    });
    
    console.log('---\n');
  });
  
  // Count documents with string values in numeric fields
  console.log('ЁЯФН Counting documents with string values in numeric fields...\n');
  
  for (const field of fieldsToCheck) {
    const stringCount = await collection.countDocuments({
      [field]: { $type: "string", $ne: "", $ne: null }
    });
    
    const numberCount = await collection.countDocuments({
      [field]: { $type: "number" }
    });
    
    const totalCount = await collection.countDocuments({
      [field]: { $exists: true, $ne: null, $ne: "" }
    });
    
    if (totalCount > 0) {
      console.log(`ЁЯУК Field: ${field}`);
      console.log(`   Total non-empty values: ${totalCount}`);
      console.log(`   String values: ${stringCount}`);
      console.log(`   Number values: ${numberCount}`);
      
      if (stringCount > 0) {
        console.log(`   тЪая╕П  ${stringCount} string values need conversion`);
      } else {
        console.log(`   тЬЕ All values are already numeric`);
      }
      console.log('');
    }
  }
};

// Main execution
const main = async () => {
  try {
    await connectDB();
    await verifyDataTypes();
  } catch (error) {
    console.error('тЭМ Error during verification:', error);
  } finally {
    await mongoose.connection.close();
    console.log('ЁЯФМ Database connection closed');
  }
};

main();