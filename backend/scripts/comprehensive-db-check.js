import mongoose from 'mongoose';
import dotenv from 'dotenv';

// Load environment variables
dotenv.config();

// MongoDB connection
const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/saral-bhoomi');
    console.log('‚úÖ MongoDB connected successfully');
  } catch (error) {
    console.error('‚ùå MongoDB connection error:', error);
    process.exit(1);
  }
};

// Get the collection directly
const getCollection = () => {
  return mongoose.connection.db.collection('landownerrecords2');
};

// Function to perform comprehensive database check
const comprehensiveCheck = async () => {
  console.log('üîç Comprehensive Database Check');
  console.log('===============================');
  
  const collection = getCollection();
  
  // Get accurate total count
  const totalCount = await collection.countDocuments();
  console.log(`üìä Total documents in collection: ${totalCount}\n`);
  
  if (totalCount === 0) {
    console.log('‚ùå No documents found in the collection');
    return;
  }
  
  // Fields to check for numeric conversion
  const numericFields = [
    '‡§ó‡§æ‡§Ç‡§µ_‡§®‡§Æ‡•Å‡§®‡§æ_7_12_‡§®‡•Å‡§∏‡§æ‡§∞_‡§ú‡§Æ‡§ø‡§®‡•Ä‡§ö‡•á_‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞_‡§π‡•á_‡§Ü‡§∞',
    '‡§∏‡§Ç‡§™‡§æ‡§¶‡§ø‡§§_‡§ú‡§Æ‡§ø‡§®‡•Ä‡§ö‡•á_‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞_‡§ö‡•å_‡§Æ‡•Ä_‡§π‡•á‡§ï‡•ç‡§ü‡§∞_‡§Ü‡§∞',
    '‡§Æ‡§Ç‡§ú‡•Å‡§∞_‡§ï‡•á‡§≤‡•á‡§≤‡§æ_‡§¶‡§∞_‡§™‡•ç‡§∞‡§§‡§ø_‡§π‡•á‡§ï‡•ç‡§ü‡§∞_‡§∞‡§ï‡•ç‡§ï‡§Æ_‡§∞‡•Å‡§™‡§Ø‡•á',
    '‡§∏‡§Ç‡§™‡§æ‡§¶‡•Ä‡§§_‡§π‡•ã‡§£‡§æ‡§±‡•ç‡§Ø‡§æ_‡§ú‡§Æ‡§ø‡§®‡•Ä‡§ö‡•ç‡§Ø‡§æ_‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞‡§æ‡§®‡•Å‡§∏‡§æ‡§∞_‡§Ø‡•á‡§£‡§æ‡§∞‡•á_‡§¨‡§æ‡§ú‡§æ‡§∞‡§Æ‡•Å‡§≤‡•ç‡§Ø_‡§∞_‡§∞‡•Ç',
    '‡§ï‡§≤‡§Æ_26_2_‡§®‡•Å‡§∏‡§æ‡§∞_‡§ó‡§æ‡§µ‡§æ‡§∏_‡§≤‡§æ‡§ó‡•Å_‡§Ö‡§∏‡§≤‡•á‡§≤‡•á_‡§ó‡§£‡§ï_Factor_‡§Ö_‡§ï‡•ç‡§∞_5_X_8',
    '‡§ï‡§≤‡§Æ_26_‡§®‡•Å‡§∏‡§æ‡§∞_‡§ú‡§Æ‡§ø‡§®‡•Ä‡§ö‡§æ_‡§Æ‡•ã‡§¨‡§¶‡§≤‡§æ_9X10',
    '‡§¨‡§æ‡§Ç‡§ß‡§ï‡§æ‡§Æ‡•á',
    '‡§µ‡§®‡§ù‡§æ‡§°‡•á',
    '‡§´‡§≥‡§ù‡§æ‡§°‡•á',
    '‡§µ‡§ø‡§π‡§ø‡§∞‡•Ä/‡§¨‡•ã‡§Ö‡§∞‡§µ‡•á‡§≤',
    '‡§è‡§ï‡•Å‡§£ ‡§∞‡§ï‡•ç‡§ï‡§Æ ‡§∞‡•Å‡§™‡§Ø‡•á (16+18+ 20+22)',
    '‡§è‡§ï‡•Å‡§£ ‡§∞‡§ï‡•ç‡§ï‡§Æ (14+23)',
    '100 %  ‡§∏‡•ã‡§≤‡•á‡§∂‡§ø‡§Ø‡§Æ (‡§¶‡§ø‡§≤‡§æ‡§∏‡§æ ‡§∞‡§ï‡•ç‡§ï‡§Æ) ‡§∏‡•á‡§ï‡•ç‡§∂‡§® 30 (1)  RFCT-LARR 2013 ‡§Ö‡§®‡•Å‡§∏‡•Ç‡§ö‡§ø 1 ‡§Ö.‡§®‡§Ç. 5      5',
    '‡§®‡§ø‡§∞‡•ç‡§ß‡§æ‡§∞‡§ø‡§§ ‡§Æ‡•ã‡§¨‡§¶‡§≤‡§æ 26 = (24+25)',
    '‡§è‡§ï‡•Ç‡§£ ‡§∞‡§ï‡•ç‡§ï‡§Æ‡•á‡§µ‡§∞  25%  ‡§µ‡§æ‡§¢‡•Ä‡§µ ‡§Æ‡•ã‡§¨‡§¶‡§≤‡§æ\n(‡§Ö.‡§ï‡•ç‡§∞. 26 ‡§®‡•Å‡§∏‡§æ‡§∞ ‡§Ø‡•á‡§£‡§æ‡§±‡•ç‡§Ø‡§æ ‡§∞‡§ï‡•ç‡§ï‡§Æ‡•á‡§µ‡§∞)',
    '‡§è‡§ï‡•Å‡§£ ‡§Æ‡•ã‡§¨‡§¶‡§≤‡§æ (26+ 27)',
    '‡§µ‡§ú‡§æ‡§µ‡§ü ‡§∞‡§ï‡•ç‡§ï‡§Æ ‡§∞‡•Å‡§™‡§Ø‡•á',
    '‡§π‡§ø‡§§‡§∏‡§Ç‡§¨‡§Ç‡§ß‡§ø‡§§‡§æ‡§≤‡§æ ‡§Ö‡§¶‡§æ ‡§ï‡§∞‡§æ‡§µ‡§Ø‡§æ‡§ö‡•Ä ‡§è‡§ï‡•Å‡§£ ‡§Æ‡•ã‡§¨‡§¶‡§≤‡§æ ‡§∞‡§ï‡•ç‡§ï‡§Æ ‡§∞‡•Å‡§™‡§Ø‡•á (‡§Ö.‡§ï‡•ç‡§∞. 28 ‡§µ‡§ú‡§æ 29)'
  ];
  
  console.log('üîç Analyzing data types across all documents...\n');
  
  // Initialize counters
  const fieldStats = {};
  numericFields.forEach(field => {
    fieldStats[field] = {
      total: 0,
      strings: 0,
      numbers: 0,
      nulls: 0,
      empties: 0,
      stringValues: []
    };
  });
  
  // Process all documents
  const cursor = collection.find({});
  let processedCount = 0;
  
  await cursor.forEach(doc => {
    processedCount++;
    
    numericFields.forEach(field => {
      const value = doc[field];
      
      if (value === null || value === undefined) {
        fieldStats[field].nulls++;
      } else if (value === '' || value === 0) {
        fieldStats[field].empties++;
      } else if (typeof value === 'string') {
        fieldStats[field].strings++;
        fieldStats[field].total++;
        // Store first few string values as examples
        if (fieldStats[field].stringValues.length < 5) {
          fieldStats[field].stringValues.push(value);
        }
      } else if (typeof value === 'number') {
        fieldStats[field].numbers++;
        fieldStats[field].total++;
      }
    });
    
    // Progress indicator
    if (processedCount % 10 === 0) {
      console.log(`‚è≥ Processed ${processedCount}/${totalCount} documents...`);
    }
  });
  
  console.log(`\n‚úÖ Completed analysis of ${processedCount} documents\n`);
  
  // Report findings
  console.log('üìä FIELD ANALYSIS RESULTS:');
  console.log('==========================\n');
  
  let hasStringFields = false;
  
  numericFields.forEach(field => {
    const stats = fieldStats[field];
    
    if (stats.total > 0 || stats.strings > 0) {
      console.log(`üî∏ ${field}:`);
      console.log(`   Total non-empty values: ${stats.total}`);
      console.log(`   String values: ${stats.strings}`);
      console.log(`   Number values: ${stats.numbers}`);
      console.log(`   Null/undefined: ${stats.nulls}`);
      console.log(`   Empty/zero: ${stats.empties}`);
      
      if (stats.strings > 0) {
        hasStringFields = true;
        console.log(`   ‚ö†Ô∏è  STRING VALUES DETECTED!`);
        console.log(`   Example string values: ${stats.stringValues.join(', ')}`);
      } else if (stats.numbers > 0) {
        console.log(`   ‚úÖ All values are numeric`);
      }
      console.log('');
    }
  });
  
  // Summary
  console.log('\nüéØ SUMMARY:');
  console.log('===========');
  
  if (hasStringFields) {
    console.log('‚ö†Ô∏è  STRING VALUES FOUND - Migration needed!');
    console.log('üìù Fields with string values need to be converted to numbers.');
  } else {
    console.log('‚úÖ All numeric fields contain proper numeric values');
    console.log('üéâ Database is already optimized for numeric operations');
  }
  
  console.log(`\nüìä Total documents processed: ${processedCount}`);
};

// Main execution
const main = async () => {
  try {
    await connectDB();
    await comprehensiveCheck();
  } catch (error) {
    console.error('‚ùå Error during comprehensive check:', error);
  } finally {
    await mongoose.connection.close();
    console.log('\nüîå Database connection closed');
  }
};

main();