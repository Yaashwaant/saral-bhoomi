const XLSX = require('xlsx');
const mongoose = require('mongoose');
const path = require('path');
const fs = require('fs');

// We'll import models dynamically since they're ES modules
let MongoLandownerRecord, MongoProject;

/**
 * IMPORT ALL 181 ROWS FROM CHANDRAPADA EXCEL FILE
 * This script reads every single row from the Excel file and imports it into the database
 */

// MongoDB connection - use the same Atlas connection as the server
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb+srv://bhiseyashwant8:wmcdBGmsJvSTjeuh@saral-bhoomi-cluster.ytoaysp.mongodb.net/saral_bhoomi?retryWrites=true&w=majority&appName=saral-bhoomi-cluster';

// Excel column mapping (based on actual headers from your file)
const COLUMN_MAPPING = {
  '‡§Ö.‡§ï‡•ç‡§∞': 'serial_number',
  '‡§ñ‡§æ‡§§‡•á‡§¶‡§æ‡§∞‡§æ‡§ö‡•á ‡§®‡§æ‡§Ç‡§µ': 'landowner_name', 
  '‡§ú‡•Å‡§®‡§æ ‡§∏.‡§®‡§Ç.': 'old_survey_number',
  '‡§®‡§µ‡§ø‡§® ‡§∏.‡§®‡§Ç.': 'new_survey_number',
  '‡§ó‡§ü ‡§®‡§Ç‡§¨‡§∞': 'group_number',
  '‡§∏‡•Ä.‡§ü‡•Ä.‡§è‡§∏. ‡§®‡§Ç‡§¨‡§∞': 'cts_number',
  '‡§ó‡§æ‡§Ç‡§µ ‡§®‡§Æ‡•Å‡§®‡§æ 7/12 ‡§®‡•Å‡§∏‡§æ‡§∞ ‡§ú‡§Æ‡§ø‡§®‡•Ä‡§ö‡•á ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ (‡§π‡•á.‡§Ü‡§∞)': 'total_area_village_record',
  '‡§∏‡§Ç‡§™‡§æ‡§¶‡§ø‡§§ ‡§ú‡§Æ‡§ø‡§®‡•Ä‡§ö‡•á ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ (‡§ö‡•å.‡§Æ‡•Ä/‡§π‡•á‡§ï‡•ç‡§ü‡§∞ ‡§Ü‡§∞)': 'acquired_area_sqm_hectare',
  '‡§ú‡§Æ‡§ø‡§®‡•Ä‡§ö‡§æ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞': 'land_category',
  '‡§ú‡§Æ‡§ø‡§®‡•Ä‡§ö‡§æ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ ‡§∂‡•á‡§§‡•Ä/ ‡§¨‡§ø‡§®‡§∂‡•á‡§§‡•Ä/ ‡§ß‡§æ‡§∞‡§£‡§æ‡§ß‡§ø‡§ï‡§æ‡§∞': 'land_type_classification',
  '‡§Æ‡§Ç‡§ú‡•Å‡§∞ ‡§ï‡•á‡§≤‡•á‡§≤‡§æ ‡§¶‡§∞ (‡§™‡•ç‡§∞‡§§‡§ø ‡§π‡•á‡§ï‡•ç‡§ü‡§∞) ‡§∞‡§ï‡•ç‡§ï‡§Æ ‡§∞‡•Å‡§™‡§Ø‡•á': 'approved_rate_per_hectare',
  '‡§∏‡§Ç‡§™‡§æ‡§¶‡•Ä‡§§ ‡§π‡•ã‡§£‡§æ‡§±‡•ç‡§Ø‡§æ ‡§ú‡§Æ‡§ø‡§®‡•Ä‡§ö‡•ç‡§Ø‡§æ ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞‡§æ‡§®‡•Å‡§∏‡§æ‡§∞ ‡§Ø‡•á‡§£‡§æ‡§∞‡•á ‡§¨‡§æ‡§ú‡§æ‡§∞‡§Æ‡•Å‡§≤‡•ç‡§Ø ‡§∞.‡§∞‡•Ç': 'market_value_acquired_area',
  '‡§ï‡§≤‡§Æ 26 (2) ‡§®‡•Å‡§∏‡§æ‡§∞ ‡§ó‡§æ‡§µ‡§æ‡§∏ ‡§≤‡§æ‡§ó‡•Å ‡§Ö‡§∏‡§≤‡•á‡§≤‡•á ‡§ó‡§£‡§ï Factor (‡§Ö.‡§ï‡•ç‡§∞. 5 X 8)': 'section_26_2_factor',
  '‡§ï‡§≤‡§Æ 26 ‡§®‡•Å‡§∏‡§æ‡§∞ ‡§ú‡§Æ‡§ø‡§®‡•Ä‡§ö‡§æ ‡§Æ‡•ã‡§¨‡§¶‡§≤‡§æ (9X10)': 'section_26_compensation',
  '‡§è‡§ï‡•Å‡§£ ‡§∞‡§ï‡•ç‡§ï‡§Æ ‡§∞‡•Å‡§™‡§Ø‡•á (16+18+ 20+22)': 'total_structures_amount',
  '‡§è‡§ï‡•Å‡§£ ‡§∞‡§ï‡•ç‡§ï‡§Æ (14+23)': 'total_compensation_amount',
  '100 %  ‡§∏‡•ã‡§≤‡•á‡§∂‡§ø‡§Ø‡§Æ (‡§¶‡§ø‡§≤‡§æ‡§∏‡§æ ‡§∞‡§ï‡•ç‡§ï‡§Æ) ‡§∏‡•á‡§ï‡•ç‡§∂‡§® 30 (1)  RFCT-LARR 2013 ‡§Ö‡§®‡•Å‡§∏‡•Ç‡§ö‡§ø 1 ‡§Ö.‡§®‡§Ç. 5': 'solatium_100_percent',
  '‡§®‡§ø‡§∞‡•ç‡§ß‡§æ‡§∞‡§ø‡§§ ‡§Æ‡•ã‡§¨‡§¶‡§≤‡§æ 26 = (24+25)': 'determined_compensation',
  '‡§è‡§ï‡•Ç‡§£ ‡§∞‡§ï‡•ç‡§ï‡§Æ‡•á‡§µ‡§∞  25%  ‡§µ‡§æ‡§¢‡•Ä‡§µ ‡§Æ‡•ã‡§¨‡§¶‡§≤‡§æ\n(‡§Ö.‡§ï‡•ç‡§∞. 26 ‡§®‡•Å‡§∏‡§æ‡§∞ ‡§Ø‡•á‡§£‡§æ‡§±‡•ç‡§Ø‡§æ ‡§∞‡§ï‡•ç‡§ï‡§Æ‡•á‡§µ‡§∞)': 'additional_25_percent_compensation',
  '‡§è‡§ï‡•Å‡§£ ‡§Æ‡•ã‡§¨‡§¶‡§≤‡§æ (26+ 27)': 'total_final_compensation',
  '‡§µ‡§ú‡§æ‡§µ‡§ü ‡§∞‡§ï‡•ç‡§ï‡§Æ ‡§∞‡•Å‡§™‡§Ø‡•á': 'deduction_amount',
  '‡§π‡§ø‡§§‡§∏‡§Ç‡§¨‡§Ç‡§ß‡§ø‡§§‡§æ‡§≤‡§æ ‡§Ö‡§¶‡§æ ‡§ï‡§∞‡§æ‡§µ‡§Ø‡§æ‡§ö‡•Ä ‡§è‡§ï‡•Å‡§£ ‡§Æ‡•ã‡§¨‡§¶‡§≤‡§æ ‡§∞‡§ï‡•ç‡§ï‡§Æ ‡§∞‡•Å‡§™‡§Ø‡•á (‡§Ö.‡§ï‡•ç‡§∞. 28 ‡§µ‡§ú‡§æ 29)': 'final_payable_amount',
  '‡§∂‡•á‡§∞‡§æ': 'remarks'
};

// Numeric fields that need to be converted to numbers
const NUMERIC_FIELDS = [
  'total_area_village_record', 'acquired_area_sqm_hectare', 'approved_rate_per_hectare',
  'market_value_acquired_area', 'section_26_2_factor', 'section_26_compensation',
  'total_structures_amount', 'total_compensation_amount', 'solatium_100_percent',
  'determined_compensation', 'additional_25_percent_compensation', 'total_final_compensation',
  'deduction_amount', 'final_payable_amount'
];

function cleanValue(value, isNumeric = false) {
  if (value === null || value === undefined || value === '') {
    return isNumeric ? 0 : '';
  }
  
  if (isNumeric) {
    // Convert to string first, then clean
    const cleaned = String(value).replace(/[^\d.-]/g, '');
    const num = parseFloat(cleaned);
    return isNaN(num) ? 0 : num;
  }
  
  return String(value).trim();
}

async function readExcelData() {
  try {
    console.log('üîç Reading Excel file...');
    
    // Path to Excel file
    const excelPath = path.join(__dirname, '../../Chandrapada New 20.01.23-.xlsx');
    
    if (!fs.existsSync(excelPath)) {
      throw new Error(`Excel file not found: ${excelPath}`);
    }
    
    // Read workbook
    const workbook = XLSX.readFile(excelPath);
    const sheetName = workbook.SheetNames[0];
    const worksheet = workbook.Sheets[sheetName];
    
    console.log(`üìä Sheet: ${sheetName}`);
    console.log(`üìä Range: ${worksheet['!ref']}`);
    
    // Parse range
    const range = XLSX.utils.decode_range(worksheet['!ref']);
    console.log(`üìä Rows: ${range.s.r} to ${range.e.r} (${range.e.r - range.s.r + 1} total)`);
    console.log(`üìä Cols: ${range.s.c} to ${range.e.c} (${range.e.c - range.s.c + 1} total)`);
    
    // Get headers from row 4 (0-indexed row 3)
    const headers = [];
    for (let col = range.s.c; col <= range.e.c; col++) {
      const cellAddress = XLSX.utils.encode_cell({ r: 3, c: col });
      const cell = worksheet[cellAddress];
      headers.push(cell ? cell.v : `Column_${col}`);
    }
    
    console.log(`üìã Found ${headers.length} headers`);
    console.log('üìã First 10 headers:', headers.slice(0, 10));
    
    // Extract all data rows starting from row 7 (0-indexed row 6)
    const records = [];
    for (let row = 6; row <= range.e.r; row++) {
      const record = {};
      let hasData = false;
      
      for (let col = range.s.c; col <= range.e.c; col++) {
        const cellAddress = XLSX.utils.encode_cell({ r: row, c: col });
        const cell = worksheet[cellAddress];
        const header = headers[col - range.s.c];
        const value = cell ? cell.v : '';
        
        if (header && value !== '') {
          record[header] = value;
          hasData = true;
        }
      }
      
      if (hasData) {
        records.push(record);
      }
    }
    
    console.log(`‚úÖ Extracted ${records.length} records from Excel`);
    
    // Show sample record
    if (records.length > 0) {
      console.log('\nüìã Sample record (first row):');
      const sample = records[0];
      Object.keys(sample).slice(0, 8).forEach(key => {
        console.log(`   ${key}: ${sample[key]}`);
      });
    }
    
    return records;
    
  } catch (error) {
    console.error('‚ùå Error reading Excel:', error);
    throw error;
  }
}

function convertToDbRecord(excelRow, projectId) {
  // Create base record with required fields
  const dbRecord = {
    project_id: projectId,
    
    // Required fields with fallbacks
    survey_number: cleanValue(excelRow['‡§®‡§µ‡§ø‡§® ‡§∏.‡§®‡§Ç.'] || excelRow['‡§ú‡•Å‡§®‡§æ ‡§∏.‡§®‡§Ç.'] || 'UNKNOWN'),
    landowner_name: cleanValue(excelRow['‡§ñ‡§æ‡§§‡•á‡§¶‡§æ‡§∞‡§æ‡§ö‡•á ‡§®‡§æ‡§Ç‡§µ'] || 'Unknown Owner'),
    area: cleanValue(excelRow['‡§ó‡§æ‡§Ç‡§µ ‡§®‡§Æ‡•Å‡§®‡§æ 7/12 ‡§®‡•Å‡§∏‡§æ‡§∞ ‡§ú‡§Æ‡§ø‡§®‡•Ä‡§ö‡•á ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ (‡§π‡•á.‡§Ü‡§∞)'] || 0, true),
    
    // Location defaults
    village: '‡§ö‡§Ç‡§¶‡•ç‡§∞‡§™‡§¶‡§æ',
    taluka: 'Unknown',
    district: 'Unknown',
    
    // Status defaults
    kyc_status: 'pending',
    payment_status: 'pending',
    notice_generated: false,
    is_active: true,
    
    // Format tracking
    data_format: 'parishisht_k',
    source_file_name: 'Chandrapada New 20.01.23-.xlsx',
    import_batch_id: Date.now().toString()
  };
  
  // Map all Excel columns to DB fields
  Object.keys(COLUMN_MAPPING).forEach(excelCol => {
    const dbField = COLUMN_MAPPING[excelCol];
    if (excelRow[excelCol] !== undefined) {
      const isNumeric = NUMERIC_FIELDS.includes(dbField);
      dbRecord[dbField] = cleanValue(excelRow[excelCol], isNumeric);
    }
  });
  
  return dbRecord;
}

async function importToDatabase() {
  let connection;
  
  try {
    console.log('üöÄ Starting Excel import process...');
    
    // Dynamic import of ES modules
    console.log('üì¶ Loading models...');
    const { default: LandownerRecordModel } = await import('../models/mongo/LandownerRecord.js');
    const { default: ProjectModel } = await import('../models/mongo/Project.js');
    MongoLandownerRecord = LandownerRecordModel;
    MongoProject = ProjectModel;
    
    // Connect to MongoDB
    console.log('üì¶ Connecting to MongoDB...');
    connection = await mongoose.connect(MONGODB_URI);
    console.log('‚úÖ Connected to MongoDB');
    
    // Find or create project
    let project = await MongoProject.findOne({ projectName: 'Chandrapada Import Project' });
    if (!project) {
      project = new MongoProject({
        projectName: 'Chandrapada Import Project',
        projectNumber: 'CHANDRAPADA-2023',
        schemeName: 'Chandrapada Land Acquisition',
        landRequired: 100,
        landAvailable: 0,
        landToBeAcquired: 100,
        type: 'other',
        district: 'Unknown',
        taluka: 'Unknown',
        villages: ['‡§ö‡§Ç‡§¶‡•ç‡§∞‡§™‡§¶‡§æ'],
        isActive: true
      });
      
      await project.save();
      console.log('üìÅ Created project:', project.projectName);
    } else {
      console.log('üìÅ Using existing project:', project.projectName);
    }
    
    // Read Excel data
    const excelRecords = await readExcelData();
    
    if (excelRecords.length === 0) {
      console.log('‚ö†Ô∏è No records found in Excel file');
      return;
    }
    
    // Clear existing records for clean import
    const existingCount = await MongoLandownerRecord.countDocuments({ project_id: project._id });
    if (existingCount > 0) {
      console.log(`üóëÔ∏è Clearing ${existingCount} existing records for clean import...`);
      await MongoLandownerRecord.deleteMany({ project_id: project._id });
    }
    
    // Convert and prepare records
    console.log(`üîÑ Converting ${excelRecords.length} Excel records to database format...`);
    const dbRecords = [];
    let successCount = 0;
    let skipCount = 0;
    
    excelRecords.forEach((excelRow, index) => {
      try {
        const dbRecord = convertToDbRecord(excelRow, project._id);
        
        // Basic validation - check required fields for uniqueness
        if (!dbRecord.landowner_name || dbRecord.landowner_name === 'Unknown Owner') {
          console.warn(`‚ö†Ô∏è Row ${index + 1}: No landowner name, skipping`);
          skipCount++;
          return;
        }
        
        // At least one survey number should be present
        if ((!dbRecord.old_survey_number || dbRecord.old_survey_number === '') && 
            (!dbRecord.new_survey_number || dbRecord.new_survey_number === '') &&
            (!dbRecord.survey_number || dbRecord.survey_number === 'UNKNOWN')) {
          console.warn(`‚ö†Ô∏è Row ${index + 1}: No survey numbers available, skipping`);
          skipCount++;
          return;
        }
        
        // Ensure we have values for unique constraint (use fallbacks if needed)
        if (!dbRecord.old_survey_number) dbRecord.old_survey_number = dbRecord.survey_number || '';
        if (!dbRecord.new_survey_number) dbRecord.new_survey_number = dbRecord.survey_number || '';
        
        dbRecords.push(dbRecord);
        successCount++;
        
      } catch (error) {
        console.error(`‚ùå Error processing row ${index + 1}:`, error.message);
        skipCount++;
      }
    });
    
    console.log(`üìä Conversion complete: ${successCount} records ready, ${skipCount} skipped`);
    
    if (dbRecords.length === 0) {
      console.log('‚ùå No valid records to import');
      return;
    }
    
    // Insert records in batches with duplicate handling
    console.log(`üíæ Inserting ${dbRecords.length} records into database...`);
    const batchSize = 50;
    let insertedCount = 0;
    let duplicateCount = 0;
    let errorCount = 0;
    
    for (let i = 0; i < dbRecords.length; i += batchSize) {
      const batch = dbRecords.slice(i, i + batchSize);
      try {
        // Use ordered: false to continue inserting even if some fail
        const result = await MongoLandownerRecord.insertMany(batch, { ordered: false });
        insertedCount += result.length;
        console.log(`   ‚úÖ Inserted ${insertedCount}/${dbRecords.length} records...`);
      } catch (error) {
        if (error.name === 'MongoBulkWriteError') {
          // Handle bulk write errors (duplicates)
          const inserted = error.result.insertedCount || 0;
          const duplicates = error.writeErrors?.length || 0;
          
          insertedCount += inserted;
          duplicateCount += duplicates;
          
          console.log(`   ‚ö†Ô∏è Batch ${Math.floor(i/batchSize) + 1}: ${inserted} inserted, ${duplicates} duplicates skipped`);
          
          // Log sample duplicate for debugging
          if (error.writeErrors && error.writeErrors.length > 0) {
            const sampleError = error.writeErrors[0];
            console.log(`   üîç Sample duplicate: ${JSON.stringify(sampleError.err.op.landowner_name)} (${sampleError.err.op.old_survey_number} ‚Üí ${sampleError.err.op.new_survey_number})`);
          }
        } else {
          console.error(`   ‚ùå Batch error:`, error.message);
          errorCount += batch.length;
        }
      }
    }
    
    // Final verification
    const finalCount = await MongoLandownerRecord.countDocuments({ project_id: project._id });
    
    console.log('\nüéâ IMPORT COMPLETED SUCCESSFULLY!');
    console.log('üìä Final Summary:');
    console.log(`   üìÑ Excel file: Chandrapada New 20.01.23-.xlsx`);
    console.log(`   üìä Excel records found: ${excelRecords.length}`);
    console.log(`   ‚úÖ Successfully imported: ${insertedCount}`);
    console.log(`   üîÑ Duplicates skipped: ${duplicateCount}`);
    console.log(`   ‚ö†Ô∏è Invalid/Skipped: ${skipCount}`);
    console.log(`   ‚ùå Errors: ${errorCount}`);
    console.log(`   üì¶ Total database records: ${finalCount}`);
    console.log(`   üìÅ Project: ${project.projectName} (ID: ${project._id})`);
    console.log(`   üîë Unique constraint: project_id + serial_number`);
    
    // Show sample of imported data
    const sampleRecord = await MongoLandownerRecord.findOne({ project_id: project._id });
    if (sampleRecord) {
      console.log('\nüìã Sample imported record:');
      console.log(`   üÜî Serial: ${sampleRecord.serial_number || 'N/A'}`);
      console.log(`   üë§ Name: ${sampleRecord.landowner_name}`);
      console.log(`   üìç Old Survey: ${sampleRecord.old_survey_number || 'N/A'}`);
      console.log(`   üìç New Survey: ${sampleRecord.new_survey_number || 'N/A'}`);
      console.log(`   üìç Primary Survey: ${sampleRecord.survey_number || 'N/A'}`);
      console.log(`   üè∑Ô∏è Group: ${sampleRecord.group_number || 'N/A'}`);
      console.log(`   üìè Area: ${sampleRecord.total_area_village_record || 'N/A'} Ha`);
      console.log(`   üí∞ Final Amount: ‚Çπ${sampleRecord.final_payable_amount || 'N/A'}`);
      console.log(`   üìä Format: ${sampleRecord.data_format}`);
      console.log(`   üîë Unique Key: "${project._id}" + "${sampleRecord.serial_number}"`);
    }
    
    console.log('\n‚ú® All Excel rows have been imported into the database!');
    console.log('üåê You can now view them in the frontend Land Records Management section.');
    
  } catch (error) {
    console.error('üí• Import failed:', error);
    throw error;
  } finally {
    if (connection) {
      await mongoose.disconnect();
      console.log('üì¶ Disconnected from MongoDB');
    }
  }
}

// Run the import
importToDatabase()
  .then(() => {
    console.log('üèÅ Import process completed successfully');
    process.exit(0);
  })
  .catch((error) => {
    console.error('üí• Import process failed:', error);
    process.exit(1);
  });
